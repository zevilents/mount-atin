-- Final Rayfield Hub â€” Thorough fix (Player / Teleport / Server / Troll with aura & selected fling)
-- Copy-paste ENTIRE script into your executor.

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

-- Window
local Window = Rayfield:CreateWindow({
   Name = "Rayfield Hub - Final",
   LoadingTitle = "Rayfield Hub",
   LoadingSubtitle = "Final Fix",
   Theme = "Default",
   ToggleUIKeybind = "K",
   ConfigurationSaving = { Enabled = true, FolderName = nil, FileName = "RayfieldFinal" }
})

-- Tabs
local PlayerTab   = Window:CreateTab("Player", 4483362458)
local TeleportTab = Window:CreateTab("Teleport", 4483362458)
local ServerTab   = Window:CreateTab("Server", 4483362458)
local TrollTab    = Window:CreateTab("Troll", 4483362458)

----------------------------------------------------------------
-- Helpers
----------------------------------------------------------------
local function safeHumanoid()
   local c = LocalPlayer.Character
   if not c then return nil end
   return c:FindFirstChildOfClass("Humanoid")
end
local function safeHRP()
   local c = LocalPlayer.Character
   if not c then return nil end
   return c:FindFirstChild("HumanoidRootPart")
end

local function getPlayerNameList()
   local list = {}
   for _, p in ipairs(Players:GetPlayers()) do
      if p ~= LocalPlayer then table.insert(list, p.Name) end
   end
   if #list == 0 then table.insert(list, "No Players") end
   return list
end

local function safeSetCFrame(hrp, cf)
   pcall(function() hrp.CFrame = cf end)
end
local function safeMoveTo(pos)
   pcall(function()
      if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
         LocalPlayer.Character:MoveTo(pos)
      end
   end)
end

----------------------------------------------------------------
-- PLAYER TAB (order: WalkSpeed, JumpPower, InfiniteJump, Fly, Fly Speed, Noclip, Reset)
----------------------------------------------------------------
-- Saved defaults
local SAVED_WALK = 16
local SAVED_JUMP = 50

-- WalkSpeed slider
local WalkSlider = PlayerTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {16, 500},
   Increment = 1,
   Suffix = "speed",
   CurrentValue = SAVED_WALK,
   Callback = function(v)
      SAVED_WALK = v
      local h = safeHumanoid()
      if h then pcall(function() h.WalkSpeed = v end) end
   end,
})

-- JumpPower slider
local JumpSlider = PlayerTab:CreateSlider({
   Name = "JumpPower",
   Range = {50, 500},
   Increment = 1,
   Suffix = "power",
   CurrentValue = SAVED_JUMP,
   Callback = function(v)
      SAVED_JUMP = v
      local h = safeHumanoid()
      if h then
         pcall(function()
            h.UseJumpPower = true
            h.JumpPower = v
            h.JumpHeight = v/7
         end)
      end
   end,
})

-- Infinite Jump (placed here per requested order)
local InfiniteJumpEnabled = false
PlayerTab:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Callback = function(val) InfiniteJumpEnabled = val end,
})
UserInputService.JumpRequest:Connect(function()
   if InfiniteJumpEnabled then
      local h = safeHumanoid()
      if h then pcall(function() h:ChangeState(Enum.HumanoidStateType.Jumping) end) end
   end
end)

-- Fly Mode + Fly Speed
local FlyEnabled = false
local FlySpeed = 50
local FlyBV = nil
local FlyConn = nil

local function createFlyBV(hrp)
   if not hrp then return end
   if not FlyBV or not FlyBV.Parent then
      FlyBV = Instance.new("BodyVelocity")
      FlyBV.Name = "Rayfield_FlyBV"
      FlyBV.MaxForce = Vector3.new(1e5, 1e5, 1e5)
      FlyBV.Velocity = Vector3.zero
      FlyBV.Parent = hrp
   else
      FlyBV.Parent = hrp
   end
end

local function startFlyLoop()
   if FlyConn then FlyConn:Disconnect() FlyConn = nil end
   FlyConn = RunService.RenderStepped:Connect(function()
      if not FlyEnabled then return end
      local hrp = safeHRP()
      if not hrp then return end
      createFlyBV(hrp)
      local cam = workspace.CurrentCamera
      local dir = Vector3.zero
      if UserInputService:IsKeyDown(Enum.KeyCode.W) then dir += cam.CFrame.LookVector end
      if UserInputService:IsKeyDown(Enum.KeyCode.S) then dir -= cam.CFrame.LookVector end
      if UserInputService:IsKeyDown(Enum.KeyCode.A) then dir -= cam.CFrame.RightVector end
      if UserInputService:IsKeyDown(Enum.KeyCode.D) then dir += cam.CFrame.RightVector end
      if UserInputService:IsKeyDown(Enum.KeyCode.Space) then dir += Vector3.new(0,1,0) end
      if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then dir -= Vector3.new(0,1,0) end
      if dir.Magnitude > 0 then
         FlyBV.Velocity = dir.Unit * FlySpeed
      else
         FlyBV.Velocity = Vector3.zero
      end
   end)
end

PlayerTab:CreateToggle({
   Name = "Fly Mode",
   CurrentValue = false,
   Callback = function(val)
      FlyEnabled = val
      if FlyEnabled then
         startFlyLoop()
      else
         if FlyConn then FlyConn:Disconnect(); FlyConn = nil end
         if FlyBV and FlyBV.Parent then FlyBV:Destroy(); FlyBV = nil end
      end
   end,
})

PlayerTab:CreateSlider({
   Name = "Fly Speed",
   Range = {10, 1000},
   Increment = 1,
   CurrentValue = FlySpeed,
   Suffix = "speed",
   Callback = function(v) FlySpeed = v end,
})

-- Noclip toggle (with re-enable/disable collisions when off)
local NoclipEnabled = false
local NoclipConn = nil
PlayerTab:CreateToggle({
   Name = "Noclip",
   CurrentValue = false,
   Callback = function(val)
      NoclipEnabled = val
      if NoclipEnabled and not NoclipConn then
         NoclipConn = RunService.Stepped:Connect(function()
            local c = LocalPlayer.Character
            if not c then return end
            for _, part in ipairs(c:GetDescendants()) do
               if part and part:IsA("BasePart") then
                  pcall(function() part.CanCollide = false end)
               end
            end
         end)
      elseif not NoclipEnabled and NoclipConn then
         NoclipConn:Disconnect(); NoclipConn = nil
         -- try to re-enable collisions (best-effort)
         local c = LocalPlayer.Character
         if c then
            for _, part in ipairs(c:GetDescendants()) do
               if part and part:IsA("BasePart") then
                  pcall(function() part.CanCollide = true end)
               end
            end
         end
      end
   end,
})

-- Reset Speed & Jump button
PlayerTab:CreateButton({
   Name = "Reset Speed & Jump",
   Callback = function()
      local h = safeHumanoid()
      if h then
         pcall(function()
            h.WalkSpeed = 16
            h.UseJumpPower = true
            h.JumpPower = 50
            h.JumpHeight = 50/7
         end)
      end
      SAVED_WALK = 16; SAVED_JUMP = 50
      WalkSlider:Set(16); JumpSlider:Set(50)
   end,
})

-- Ensure settings re-applied on respawn and fly/noclip reattach
LocalPlayer.CharacterAdded:Connect(function(char)
   task.wait(0.4)
   local h = safeHumanoid()
   if h then
      pcall(function()
         h.WalkSpeed = SAVED_WALK
         h.UseJumpPower = true
         h.JumpPower = SAVED_JUMP
         h.JumpHeight = SAVED_JUMP/7
      end)
   end
   if FlyEnabled then
      task.wait(0.15)
      startFlyLoop()
   end
   if NoclipEnabled and not NoclipConn then
      NoclipConn = RunService.Stepped:Connect(function()
         local c = LocalPlayer.Character
         if not c then return end
         for _, part in ipairs(c:GetDescendants()) do
            if part and part:IsA("BasePart") then pcall(function() part.CanCollide = false end) end
         end
      end)
   end
end)

----------------------------------------------------------------
-- TELEPORT TAB (Teleport to Player, Teleport to Pos)
----------------------------------------------------------------

-- Player dropdown (stable: use CurrentOption as array)
local SelectedPlayer = nil
local playerOptions = getPlayerNameList()
local PlayerDropdown = TeleportTab:CreateDropdown({
   Name = "Select Player",
   Options = playerOptions,
   CurrentOption = { playerOptions[1] },
   MultipleOptions = false,
   Callback = function(opt)
      if typeof(opt) == "table" then opt = opt[1] end
      SelectedPlayer = (opt ~= "No Players") and opt or nil
   end,
})

-- Teleport button
TeleportTab:CreateButton({
   Name = "Teleport to Player",
   Callback = function()
      if not SelectedPlayer then Rayfield:Notify("Teleport", "Pilih player dulu.", 4); return end
      local target = Players:FindFirstChild(SelectedPlayer)
      local hrp = safeHRP()
      if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") and hrp then
         pcall(function()
            safeSetCFrame(hrp, target.Character.HumanoidRootPart.CFrame + Vector3.new(0,5,0))
         end)
      else
         Rayfield:Notify("Teleport", "Target/HRP tidak tersedia.", 4)
      end
   end,
})

-- Keep player dropdown fresh
local function refreshPlayerDropdown()
   local opts = getPlayerNameList()
   PlayerDropdown:Refresh(opts, true)
   if opts[1] then PlayerDropdown:Set({opts[1]}) end
   SelectedPlayer = (opts[1] ~= "No Players") and opts[1] or nil
end
Players.PlayerAdded:Connect(refreshPlayerDropdown)
Players.PlayerRemoving:Connect(refreshPlayerDropdown)

-- Teleport Positions (ordered)
local PosList = {
   ["Pos 1"]  = Vector3.new(5, 12, -404),
   ["Pos 2"]  = Vector3.new(-184, 128, 408),
   ["Pos 3"]  = Vector3.new(-166, 229, 652),
   ["Pos 4"]  = Vector3.new(-38, 406, 616),
   ["Pos 5"]  = Vector3.new(130, 651, 614),
   ["Pos 6"]  = Vector3.new(-247, 666, 735),
   ["Pos 7"]  = Vector3.new(-685, 641, 868),
   ["Pos 8"]  = Vector3.new(-658, 688, 1458),
   ["Pos 9"]  = Vector3.new(-507, 903, 1868),
   ["Pos 10"] = Vector3.new(59, 950, 2089),
   ["Pos 11"] = Vector3.new(52, 981, 2450),
   ["Pos 12"] = Vector3.new(72, 1097, 2456),
   ["Pos 13"] = Vector3.new(264, 1270, 2038),
   ["Pos 14"] = Vector3.new(-419, 1302, 2395),
   ["Pos 15"] = Vector3.new(-773, 1314, 2665),
   ["Pos 16"] = Vector3.new(-837, 1475, 2626),
   ["Pos 17"] = Vector3.new(-469, 1465, 2769),
   ["Pos 18"] = Vector3.new(-468, 1537, 2837),
   ["Pos 19"] = Vector3.new(-386, 1640, 2795),
   ["Pos 20"] = Vector3.new(-208, 1666, 2749),
   ["Pos 21"] = Vector3.new(-233, 1742, 2792),
   ["Pos 22"] = Vector3.new(-423, 1740, 2799),
   ["Pos 23"] = Vector3.new(-424, 1713, 3421),
   ["Pos 24"] = Vector3.new(71, 1719, 3428),
   ["Pos 25"] = Vector3.new(436, 1720, 3431),
   ["Pos 26"] = Vector3.new(625, 1799, 3433),
   ["Puncak"]  = Vector3.new(781, 2163, 3921),
}
local orderedPosNames = {}
for i = 1, 26 do table.insert(orderedPosNames, ("Pos %d"):format(i)) end
table.insert(orderedPosNames, "Puncak")

local SelectedPos = orderedPosNames[1]
local PosDropdown = TeleportTab:CreateDropdown({
   Name = "Select Pos",
   Options = orderedPosNames,
   CurrentOption = { orderedPosNames[1] },
   MultipleOptions = false,
   Callback = function(opt)
      if typeof(opt) == "table" then opt = opt[1] end
      SelectedPos = opt
   end,
})
TeleportTab:CreateButton({
   Name = "Teleport ke Pos",
   Callback = function()
      local vec = PosList[SelectedPos]
      local hrp = safeHRP()
      if vec and hrp then
         pcall(function() safeSetCFrame(hrp, CFrame.new(vec + Vector3.new(0,3,0))) end)
      else
         Rayfield:Notify("Teleport", "Pilih pos dan pastikan HRP ada.", 4)
      end
   end,
})

----------------------------------------------------------------
-- SERVER TAB (Rejoin & Server Hop)
----------------------------------------------------------------
ServerTab:CreateButton({
   Name = "Rejoin Server",
   Callback = function()
      pcall(function() TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer) end)
   end,
})

ServerTab:CreateButton({
   Name = "Server Hop",
   Callback = function()
      -- fetch server list and teleport to random available
      local ok, res = pcall(function()
         local url = ("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100"):format(game.PlaceId)
         local body = game:HttpGet(url)
         return HttpService:JSONDecode(body)
      end)
      if not ok or not res or not res.data then Rayfield:Notify("Server Hop", "Gagal ambil server list.", 5); return end
      local ids = {}
      for _, s in ipairs(res.data) do
         if s.id ~= game.JobId and s.playing < s.maxPlayers then table.insert(ids, s.id) end
      end
      if #ids == 0 then Rayfield:Notify("Server Hop", "Tidak ada server lain.", 5); return end
      local chosen = ids[math.random(1, #ids)]
      pcall(function() TeleportService:TeleportToPlaceInstance(game.PlaceId, chosen, LocalPlayer) end)
   end,
})

----------------------------------------------------------------
-- TROLL TAB (Aura Fling with radius & power + Selected Fling + Loop fling)
----------------------------------------------------------------
local auraEnabled = false
local auraRadius = 30    -- default bigger
local auraPower  = 400   -- default power
local flingCooldown = 0.9
local lastFling = {}     -- per UserId cooldown

-- UI
TrollTab:CreateSlider({
   Name = "Aura Radius",
   Range = {5, 500},
   Increment = 5,
   CurrentValue = auraRadius,
   Suffix = "studs",
   Callback = function(v) auraRadius = v end,
})
TrollTab:CreateSlider({
   Name = "Aura Power",
   Range = {50, 2000},
   Increment = 10,
   CurrentValue = auraPower,
   Suffix = "force",
   Callback = function(v) auraPower = v end,
})
TrollTab:CreateToggle({
   Name = "Aura Fling (HRP-burst)",
   CurrentValue = false,
   Callback = function(v) auraEnabled = v end,
})

-- Selected fling target dropdown
local selectedFlingTarget = nil
local initialNames = getPlayerNameList()
local FlingDropdown = TrollTab:CreateDropdown({
   Name = "Select Player to Fling",
   Options = initialNames,
   CurrentOption = { initialNames[1] },
   MultipleOptions = false,
   Callback = function(opt)
      if typeof(opt) == "table" then opt = opt[1] end
      selectedFlingTarget = (opt ~= "No Players") and opt or nil
   end,
})
local function refreshFlingDropdown()
   local opts = getPlayerNameList()
   FlingDropdown:Refresh(opts, true)
   if opts[1] then FlingDropdown:Set({opts[1]}) end
   selectedFlingTarget = (opts[1] ~= "No Players") and opts[1] or nil
end
Players.PlayerAdded:Connect(refreshFlingDropdown)
Players.PlayerRemoving:Connect(refreshFlingDropdown)

-- fling strength & loop
local flingStrength = 600
TrollTab:CreateSlider({
   Name = "Fling Strength",
   Range = {50, 3000},
   Increment = 10,
   CurrentValue = flingStrength,
   Suffix = "power",
   Callback = function(v) flingStrength = v end,
})
local loopFling = false
TrollTab:CreateToggle({ Name = "Loop Fling Selected", CurrentValue = false, Callback = function(v) loopFling = v end })

-- manual fling once button
TrollTab:CreateButton({
   Name = "Fling Selected (once)",
   Callback = function()
      if not selectedFlingTarget then Rayfield:Notify("Fling", "Pilih target dulu", 4); return end
      local tgt = Players:FindFirstChild(selectedFlingTarget)
      if not tgt or not tgt.Character or not tgt.Character:FindFirstChild("HumanoidRootPart") then Rayfield:Notify("Fling", "Target tidak valid", 4); return end
      local tr = tgt.Character.HumanoidRootPart
      task.spawn(function()
         pcall(function()
            -- attempt multiple strategies for higher success chance
            tr.AssemblyLinearVelocity = (tr.Position - (safeHRP() and safeHRP().Position or tr.Position)).Unit * flingStrength + Vector3.new(0,200,0)
         end)
         task.wait(0.08)
         pcall(function()
            if safeHRP() then
               local dir = (tr.Position - safeHRP().Position)
               if dir.Magnitude == 0 then dir = Vector3.new(0,1,0) end
               safeHRP().Velocity = dir.Unit * (flingStrength * 3)
               safeHRP().RotVelocity = Vector3.new(0, 60, 0)
               task.wait(0.09)
               safeHRP().Velocity = Vector3.zero
               safeHRP().RotVelocity = Vector3.zero
            end
         end)
         task.wait(0.08)
         pcall(function()
            tr.AssemblyLinearVelocity = (tr.Position - (safeHRP() and safeHRP().Position or tr.Position)).Unit * (flingStrength * 1.2) + Vector3.new(0,250,0)
         end)
      end)
   end,
})

-- Heartbeat worker: aura fling + loop fling
RunService.Heartbeat:Connect(function()
   -- aura fling
   if auraEnabled and LocalPlayer.Character and safeHRP() then
      local root = safeHRP()
      for _, plr in ipairs(Players:GetPlayers()) do
         if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local tr = plr.Character.HumanoidRootPart
            local dist = (tr.Position - root.Position).Magnitude
            if dist <= auraRadius then
               local now = os.clock()
               if (not lastFling[plr.UserId]) or (now - lastFling[plr.UserId] >= flingCooldown) then
                  lastFling[plr.UserId] = now
                  task.spawn(function()
                     -- sequence of attempts
                     pcall(function()
                        tr.AssemblyLinearVelocity = (tr.Position - root.Position).Unit * (auraPower) + Vector3.new(0,200,0)
                     end)
                     task.wait(0.08)
                     pcall(function()
                        local dir = (tr.Position - root.Position)
                        if dir.Magnitude == 0 then dir = Vector3.new(0,1,0) end
                        root.Velocity = dir.Unit * (auraPower * 3)
                        root.RotVelocity = Vector3.new(0, 60, 0)
                        task.wait(0.06)
                        root.Velocity = Vector3.zero
                        root.RotVelocity = Vector3.zero
                     end)
                     task.wait(0.08)
                     pcall(function()
                        tr.AssemblyLinearVelocity = (tr.Position - root.Position).Unit * (auraPower * 1.1) + Vector3.new(0,220,0)
                     end)
                  end)
               end
            end
         end
      end
   end

   -- loop fling selected
   if loopFling and selectedFlingTarget then
      local tgt = Players:FindFirstChild(selectedFlingTarget)
      if tgt and tgt.Character and tgt.Character:FindFirstChild("HumanoidRootPart") then
         local tr = tgt.Character.HumanoidRootPart
         pcall(function()
            if safeHRP() then
               local dir = (tr.Position - safeHRP().Position)
               if dir.Magnitude == 0 then dir = Vector3.new(0,1,0) end
               tr.AssemblyLinearVelocity = dir.Unit * flingStrength + Vector3.new(0,200,0)
            else
               tr.AssemblyLinearVelocity = Vector3.new(0, flingStrength, 0)
            end
         end)
      end
   end
end)

-- refresh dropdowns at start
refreshPlayerDropdown()
refreshFlingDropdown()
Rayfield:Notify("Ready", "Script loaded â€” coba fitur Troll -> Aura Fling atau fling selected.", 4)
